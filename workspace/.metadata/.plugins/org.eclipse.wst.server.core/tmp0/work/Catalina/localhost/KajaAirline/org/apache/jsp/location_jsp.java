/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.53
 * Generated at: 2020-07-17 11:00:44 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class location_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"EUC-KR\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("body{\r\n");
      out.write("\tbackground-image: url(\"./imgs/bg.jpg\");\r\n");
      out.write("}\r\n");
      out.write(".locationTable{\r\n");
      out.write("\t\tmargin-left: auto;\r\n");
      out.write("\t\tmargin-right: auto;\r\n");
      out.write("\t\twidth: 80%;\r\n");
      out.write("\t\ttext-align: left;\r\n");
      out.write("\t\tborder: 0;\r\n");
      out.write("\t\tpadding: 0;\r\n");
      out.write("}\t\r\n");
      out.write(".locationStation{\r\n");
      out.write("\tfont-size: 15pt;\r\n");
      out.write("\tfont-weight: bold;\r\n");
      out.write("\tfont-style: italic;\r\n");
      out.write("}\t\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<header>\r\n");
      out.write("\t\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "header.jsp", out, false);
      out.write("\r\n");
      out.write("\t</header>\r\n");
      out.write("\t<section id=\"sectionId\">\r\n");
      out.write("\t\t<table class=\"locationTable\">\r\n");
      out.write("\t\t\t<tr><td colspan=\"2\" style=\"text-align: center;font-size: 30pt;\">\r\n");
      out.write("\t\t\t\tKaja Airline<hr>\r\n");
      out.write("\t\t\t</td></tr>\r\n");
      out.write("\t\t\t<tr><td style=\"width: 50%;\">\r\n");
      out.write("\t\t\t\t<div id=\"map\" style=\"width:500px;height:400px;\"></div>\r\n");
      out.write("\t\t\t</td><td>\r\n");
      out.write("\t\t\t\t<div style=\"font-size: 30pt;\">찾아 오시는 길</div>\r\n");
      out.write("\t\t\t\t<span class=\"locationStation\">종로 3가역 (1/3/5호선)</span><br> &nbsp; &nbsp; - 9번 출구 이용 1분 소요<br>\r\n");
      out.write("\t\t\t\t<span class=\"locationStation\">을지로 3가역 (2/3호선)</span><br> &nbsp; &nbsp; - 5번 출구 이용 6분 소요<br>\r\n");
      out.write("\t\t\t\t<span class=\"locationStation\">종각역 (1호선)</span><br> &nbsp; &nbsp; - 3번 출구 이용 12분 소요<br>\r\n");
      out.write("\t\t\t\t<span class=\"locationStation\">을지로 4가역 (2/5호선)</span><br> &nbsp; &nbsp; - 4번 출구 이용 13분 소요<br>\r\n");
      out.write("\t\t\t</td></tr>\r\n");
      out.write("\t\t</table>\r\n");
      out.write("\t</section>\r\n");
      out.write("\t<footer>\r\n");
      out.write("\t\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "footer.jsp", out, false);
      out.write("\r\n");
      out.write("\t</footer>\r\n");
      out.write("<script src=\"./js/jquery-3.1.1.js\"charset=\"euc-kr\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=8c02a075cc02c33ee8fde4dfb44e6476\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("window.onload=function setSign() {\r\n");
      out.write("\r\n");
      out.write("\tvar container = document.getElementById(\"map\");\r\n");
      out.write("\tvar options = {\r\n");
      out.write("\t    center: new kakao.maps.LatLng(37.570914, 126.992442),\r\n");
      out.write("\t    level: 3  \r\n");
      out.write("\t};\r\n");
      out.write("\tvar map = new kakao.maps.Map(container, options);\r\n");
      out.write("\tvar markerPosition  = new kakao.maps.LatLng(37.570914, 126.992442); \r\n");
      out.write("\r\n");
      out.write("\t// 마커를 생성합니다\r\n");
      out.write("\tvar marker = new kakao.maps.Marker({\r\n");
      out.write("\t    position: markerPosition\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\t// 마커가 지도 위에 표시되도록 설정합니다\r\n");
      out.write("\tmarker.setMap(map);\r\n");
      out.write("\tshowSlides();\r\n");
      out.write("\t\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
